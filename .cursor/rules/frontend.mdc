---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: *.tsx,*.astro
alwaysApply: false
---
## Frontend

### General Guidelines

- Use Astro components (.astro) for static content and layout
- Implement framework components in React only when interactivity is needed

### Guidelines for Styling

#### Tailwind

- Use the @layer directive to organize styles into components, utilities, and base layers
- Use arbitrary values with square brackets (e.g., w-[123px]) for precise one-off designs
- Implement the Tailwind configuration file for customizing theme, plugins, and variants
- Leverage the theme() function in CSS for accessing Tailwind theme values
- Implement dark mode with the dark: variant
- Use responsive variants (sm:, md:, lg:, etc.) for adaptive designs
- Leverage state variants (hover:, focus-visible:, active:, etc.) for interactive elements

### Guidelines for Accessibility

#### ARIA Best Practices

- Use ARIA landmarks to identify regions of the page (main, navigation, search, etc.)
- Apply appropriate ARIA roles to custom interface elements that lack semantic HTML equivalents
- Set aria-expanded and aria-controls for expandable content like accordions and dropdowns
- Use aria-live regions with appropriate politeness settings for dynamic content updates
- Implement aria-hidden to hide decorative or duplicative content from screen readers
- Apply aria-label or aria-labelledby for elements without visible text labels
- Use aria-describedby to associate descriptive text with form inputs or complex elements
- Implement aria-current for indicating the current item in a set, navigation, or process
- Avoid redundant ARIA that duplicates the semantics of native HTML elements

### Guidelines for PWA Integration

#### General PWA Practices
- Maintain Code Separation: Isolate all PWA-related logic away from UI components. Keep service worker code, manifest type definitions, and related utilities in dedicated directories (e.g. `src/lib/pwa` for service worker logic, `src/types/pwa.ts` for types, and `src/components/hooks/pwa` for PWA-specific hooks).
- Adopt clear naming conventions for files handling PWA logic, such as `sw.ts` or `service-worker.ts` for service workers and descriptive names for custom hooks and utilities.
- Create and enforce types for manifest values and service worker messages. Ensure that any cross-boundary data exchange between the service worker and the application is strongly typed in `.ts` files.

#### Guidelines for `.astro` Files
- Always include `<link rel="manifest" href="/manifest.webmanifest">` in the `<head>` section of layout `.astro` files.
- Include `<meta name="theme-color" content="...">` in the `<head>`, ensuring that the color value matches the one in the manifest.
- Do not register the service worker manually within the `.astro` file. Use `@vite-pwa/astro` for proper integration.
- Keep layout and PWA-specific meta/links separated from content logic to maintain clarity and modularity.

#### Guidelines for `.tsx` Files
- Do not register service workers directly within React components. Delegate the registration to the established PWA integration (using `@vite-pwa/astro`).
- Use custom hooks for any PWA-specific behaviors (e.g., handling `beforeinstallprompt` events). Place these hooks in a dedicated folder such as `src/components/hooks/pwa`.
- Ensure that UI components in `.tsx` files consume PWA state or events through context or props. Avoid mixing PWA business logic with component presentation.

#### Guidelines for `.ts` Files
- Implement all custom service worker logic and helper functions in `.ts` files, ideally under the `src/lib/pwa/` directory.
- Define and export interfaces or types for the PWA manifest to ensure consistency across the project.
- PWA logic in `.ts` files must be self-contained and only interact with other project modules through well-defined interfaces. Avoid unintended side-effects or cross-contamination with non-PWA code.
- Create helper functions (e.g., for caching strategies or fallback management) as pure functions to facilitate unit testing and reuse.
