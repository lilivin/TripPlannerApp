name: Pull Request Workflow

on:
  pull_request:
    branches: [ master ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  status-comment:
    name: PR Status Comment
    if: always()
    needs: [unit-test, e2e-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage
          path: unit-coverage
          
      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Try to read coverage summary
            let unitCoverage = 'No coverage data available';
            try {
              const coverageJson = fs.readFileSync('./unit-coverage/coverage-summary.json', 'utf8');
              const coverage = JSON.parse(coverageJson);
              const total = coverage.total;
              unitCoverage = `Lines: ${total.lines.pct}%, Statements: ${total.statements.pct}%, Functions: ${total.functions.pct}%, Branches: ${total.branches.pct}%`;
            } catch (error) {
              console.log('Error reading coverage data:', error);
            }
            
            // Get PR result status
            const unitStatus = '${{ needs.unit-test.result }}';
            const e2eStatus = '${{ needs.e2e-test.result }}';
            
            const getStatusEmoji = (status) => {
              return status === 'success' ? '✅' : status === 'skipped' ? '⏭️' : '❌';
            };
            
            // Create comment body
            const body = `## Pull Request Status
            
            | Job | Status |
            | --- | ------ |
            | Lint | ${getStatusEmoji('${{ needs.lint.result }}')} |
            | Unit Tests | ${getStatusEmoji(unitStatus)} |
            | E2E Tests | ${getStatusEmoji(e2eStatus)} |
            
            ### Unit Test Coverage
            
            ${unitCoverage}
            
            ### E2E Test Results
            
            Artifact: [Download Playwright Report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            }); 